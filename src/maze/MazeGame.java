package maze;

import java.util.List;

/**
 * Represents a maze game with a fixed map. This class receives a maze map generated by
 * {@link maze.generator.MazeGenerator} to initialize. A {@link Player} can move in the
 * maze and collect gold until he/she reaches the exit of the maze.
 */
public interface MazeGame {

  /**
   * Gets the current location of the {@link Player}.
   *
   * @return the current location of the {@link Player}
   */
  int[] getPlayerLocation();

  /**
   * Gets the possible move options for the {@link Player}. Options may contain "up", "down",
   * "left", and "right".
   *
   * @return the possible move options
   */
  List<String> getPlayerMoveOptions();

  /**
   * {@link Player} moves to the specified direction. In other words, the {@link Player} enters
   * a new maze room in the specified direction.
   *
   * @param option the move direction
   */
  void playerMove(String option);

  /**
   * Checks if the game is finished.
   *
   * @return true if the game is finished.
   */
  boolean isFinished();

  /**
   * The player shoots an arrow to the specified direction with the specified distance.
   *
   * @param option   the shooting direction
   * @param distance the number of rooms the arrow travels through
   */
  void shootArrowTo(String option, int distance);

  /**
   * Get the message generated after moving or shooting an arrow.
   *
   * @return the message
   */
  String getMessage();

  /**
   * Mark this game as finished.
   */
  void setFinished();

  /**
   * Get information about adjacent rooms, bats, pits or wumpus.
   *
   * @return the hints
   */
  String getHints();

  /**
   * Refresh the player location.
   */
  void refreshPlayer();

  /**
   * Determine whether it's a single player game.
   *
   * @param flag yes or no
   */
  void setSinglePlayer(boolean flag);

  /**
   * Copy a maze, which can be used in the view.
   *
   * @return a copy of the current maze game
   */
  Room[][] copyMaze();

}
